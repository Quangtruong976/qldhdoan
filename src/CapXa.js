import React, { useState, useEffect, useMemo, useCallback } from "react";
import { listenDaiHoiXa, updateDaiHoiXa, addDaiHoiXa, deleteDaiHoiXa } from "./services/firestoreService";

function CapXa({ user }) {
  const [data, setData] = useState([]);
  const [search, setSearch] = useState("");
  const [newDonVi, setNewDonVi] = useState("");

  useEffect(() => {
    const unsubscribe = listenDaiHoiXa(setData);
    return () => unsubscribe();
  }, []);

  const filteredData = useMemo(() => {
    return data.filter(row =>
      row.donvi?.toLowerCase().includes(search.toLowerCase())
    );
  }, [data, search]);

  const handleChange = useCallback((id, field, value) => {
    setData(prev =>
      prev.map(d => (d.id === id ? { ...d, [field]: value } : d))
    );
  }, []);

  const handleSave = async (id) => {
    const row = data.find(d => d.id === id);
    try {
      await updateDaiHoiXa(id, row);
      alert("‚úÖ L∆∞u th√†nh c√¥ng!");
    } catch (err) {
      console.error("‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu:", err);
      alert("‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu. Ki·ªÉm tra console.");
    }
  };

  const handleAdd = async () => {
    if (!newDonVi.trim()) return alert("‚ö†Ô∏è Nh·∫≠p t√™n x√£ m·ªõi!");
    try {
      await addDaiHoiXa(newDonVi);
      setNewDonVi("");
      alert("‚úÖ Th√™m x√£ m·ªõi th√†nh c√¥ng!");
    } catch (err) {
      console.error("‚ùå L·ªói khi th√™m x√£:", err);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a x√£ n√†y kh√¥ng?")) return;
    try {
      await deleteDaiHoiXa(id);
      alert("üóëÔ∏è ƒê√£ x√≥a th√†nh c√¥ng!");
    } catch (err) {
      console.error("‚ùå L·ªói khi x√≥a x√£:", err);
      alert("‚ùå Kh√¥ng th·ªÉ x√≥a, ki·ªÉm tra console.");
    }
  };

  const rowStyle = (trangthai) => ({
    backgroundColor: trangthai === "da-to-chuc" ? "#b6fcb6" : "#f8b6b6"
  });

  return (
    <div>
      <h2 style={{ color: "rgb(3, 95, 175)" }}>ƒê·∫°i h·ªôi c·∫•p x√£</h2>

      <div style={{ marginBottom: "10px" }}>
        <input
          placeholder="T√¨m theo t√™n x√£..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          style={{ marginRight: "10px", padding: "5px", width: "250px" }}
        />
        {user?.role === "tinh-doan" && (
  <>
    <input
      placeholder="T√™n x√£ m·ªõi"
      value={newDonVi}
      onChange={(e) => setNewDonVi(e.target.value)}
      style={{ marginRight: "5px", padding: "5px" }}
    />
    <button 
      onClick={handleAdd}
      style={{
        color: "white",
        backgroundColor: "#0288d1", // xanh d∆∞∆°ng nh·∫°t
        border: "none",
        padding: "5px 10px",
        borderRadius: "4px",
        cursor: "pointer"
      }}
    >
      Th√™m
    </button>
  </>
)}

      </div>

      <table border="1" style={{ width: "100%", borderCollapse: "collapse" }}>
        <thead>
          <tr>
            <th>TT</th>
            <th>ƒê∆°n v·ªã</th>
            <th>Ng√†y t·ªï ch·ª©c</th>
            <th>Tr·∫°ng th√°i</th>
            <th>B√≠ th∆∞</th>
            <th>Ph√≥ b√≠ th∆∞</th>
            {user?.role === "tinh-doan" && <th>H√†nh ƒë·ªông</th>}
          </tr>
        </thead>
        <tbody>
  {filteredData.map((row, index) => {
    const isDaToChuc = row.trangthai === "da-to-chuc";
    const textColor = isDaToChuc ? "green" : "rgb(89, 23, 23)";

    return (
      <tr key={row.id} style={rowStyle(row.trangthai)}>
        <td>{index + 1}</td>
        <td style={{ textAlign: "left", color: textColor }}>
          {user?.role === "tinh-doan" ? (
            <input
              value={row.donvi || ""}
              onChange={(e) => handleChange(row.id, "donvi", e.target.value)}
              style={{ width: "100%", color: textColor }}
            />
          ) : (
            row.donvi
          )}
        </td>
        <td style={{ color: textColor }}>
          {user?.role === "tinh-doan" ? (
            <input
              type="date"
              value={row.ngay || ""}
              onChange={(e) => handleChange(row.id, "ngay", e.target.value)}
              style={{ color: textColor }}
            />
          ) : (
            row.ngay
          )}
        </td>
        <td>
          {user?.role === "tinh-doan" ? (
            <select
              value={row.trangthai || ""}
              onChange={(e) => handleChange(row.id, "trangthai", e.target.value)}
              style={{ color: textColor }}
            >
              <option value="chua-to-chuc">Ch∆∞a t·ªï ch·ª©c</option>
              <option value="da-to-chuc">ƒê√£ t·ªï ch·ª©c</option>
            </select>
          ) : (
            <span style={{ color: textColor }}>
              {isDaToChuc ? "ƒê√£ t·ªï ch·ª©c" : "Ch∆∞a t·ªï ch·ª©c"}
            </span>
          )}
        </td>
        <td style={{ color: textColor }}>
          {user?.role === "tinh-doan" ? (
            <input
              value={row.bithu || ""}
              onChange={(e) => handleChange(row.id, "bithu", e.target.value)}
              style={{ color: textColor }}
            />
          ) : (
            row.bithu
          )}
        </td>
        <td style={{ color: textColor }}>
          {user?.role === "tinh-doan" ? (
            <input
              value={row.phobithu || ""}
              onChange={(e) => handleChange(row.id, "phobithu", e.target.value)}
              style={{ color: textColor }}
            />
          ) : (
            row.phobithu
          )}
        </td>
        {user?.role === "tinh-doan" && (
  <td>
    <button 
      onClick={() => handleSave(row.id)}
      style={{
        color: "white",
        backgroundColor: "#43a047", // xanh l√° / xanh ƒë·∫≠m
        border: "none",
        padding: "5px 10px",
        borderRadius: "4px",
        cursor: "pointer"
      }}
    >
      L∆∞u
    </button>
    <button
      onClick={() => handleDelete(row.id)}
      style={{
        color: "white",
        backgroundColor: "red",
        border: "none",
        padding: "5px 10px",
        borderRadius: "4px",
        cursor: "pointer",
        marginLeft: "5px"
      }}
    >
      X√≥a
    </button>
  </td>
)}

      </tr>
    );
  })}
</tbody>

      </table>
    </div>
  );
}

export default CapXa;
